import asyncio
import os
import json
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
BITRIX_WEBHOOK = os.getenv("BITRIX_WEBHOOK")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –î–ª—è Render.com

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, ASSISTANT_ID, BITRIX_WEBHOOK]):
    raise ValueError("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ thread_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_threads = {}

class ConversationState(StatesGroup):
    chatting = State()

# ===================== –§–£–ù–ö–¶–ò–ò BITRIX24 =====================

def create_bitrix_lead(name, phone, email=None, comments=None, telegram_id=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –ª–∏–¥–∞ –≤ Bitrix24
    """
    url = f"{BITRIX_WEBHOOK}crm.lead.add.json"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å Telegram ID
    full_comments = comments or "–õ–∏–¥ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
    if telegram_id:
        full_comments += f"\nTelegram ID: {telegram_id}"
    
    data = {
        "fields": {
            "TITLE": f"GPT: {name}",
            "NAME": name,
            "PHONE": [{"VALUE": phone, "VALUE_TYPE": "WORK"}],
            "STATUS_ID": "NEW",
            "SOURCE_ID": "OTHER",
            "COMMENTS": full_comments
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º email, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if email:
        data["fields"]["EMAIL"] = [{"VALUE": email, "VALUE_TYPE": "WORK"}]
    
    try:
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        
        if result.get("result"):
            lead_id = result["result"]
            print(f"‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω –≤ Bitrix24: ID {lead_id}")
            return {
                "success": True,
                "lead_id": lead_id,
                "message": f"–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ CRM. ID: {lead_id}"
            }
        else:
            error_msg = result.get("error_description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥–∞ –≤ CRM"
            }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Bitrix24: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CRM"
        }

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê FUNCTION CALLING =====================

def handle_function_call(function_name, arguments, user_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç Assistant
    """
    if function_name == "create_bitrix24_lead":
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = json.loads(arguments)
        
        name = args.get("name")
        phone = args.get("phone")
        email = args.get("email")
        comments = args.get("comments")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
        result = create_bitrix_lead(
            name=name,
            phone=phone,
            email=email,
            comments=comments,
            telegram_id=user_id
        )
        
        return json.dumps(result, ensure_ascii=False)
    
    return json.dumps({"success": False, "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"})

# ===================== TELEGRAM HANDLERS =====================

@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    thread = openai_client.beta.threads.create()
    user_threads[user_id] = thread.id
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–°–ö, {username}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ —Å–∏—Å—Ç–µ–º–∞—Ö GPS/–ì–õ–û–ù–ê–°–° –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "
        "–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞.\n\n"
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n"
        "üöõ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n"
        "‚õΩ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–æ–ø–ª–∏–≤–∞\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã\n"
        "üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "üë§ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    )
    
    await state.set_state(ConversationState.chatting)

@dp.message(ConversationState.chatting)
async def message_handler(message: types.Message):
    user_id = message.from_user.id
    user_message = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread
    if user_id not in user_threads:
        thread = openai_client.beta.threads.create()
        user_threads[user_id] = thread.id
    
    thread_id = user_threads[user_id]
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread
        openai_client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Assistant
        run = openai_client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–π
        max_iterations = 60  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ (60 * 0.5)
        iteration = 0
        
        while run.status in ["queued", "in_progress", "requires_action"] and iteration < max_iterations:
            await asyncio.sleep(0.5)
            iteration += 1
            
            run = openai_client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )
            
            # –ï—Å–ª–∏ Assistant —Ç—Ä–µ–±—É–µ—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            if run.status == "requires_action":
                tool_calls = run.required_action.submit_tool_outputs.tool_calls
                tool_outputs = []
                
                for tool_call in tool_calls:
                    function_name = tool_call.function.name
                    arguments = tool_call.function.arguments
                    
                    print(f"üîß –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name}")
                    print(f"üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {arguments}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                    output = handle_function_call(function_name, arguments, user_id)
                    
                    tool_outputs.append({
                        "tool_call_id": tool_call.id,
                        "output": output
                    })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞—Ç–Ω–æ –≤ Assistant
                run = openai_client.beta.threads.runs.submit_tool_outputs(
                    thread_id=thread_id,
                    run_id=run.id,
                    tool_outputs=tool_outputs
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if run.status == "completed":
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            messages = openai_client.beta.threads.messages.list(
                thread_id=thread_id,
                order="desc",
                limit=1
            )
            
            assistant_response = messages.data.content.text.value
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–º–∞–∫—Å 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(assistant_response) > 4096:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                for i in range(0, len(assistant_response), 4096):
                    await message.answer(
                        assistant_response[i:i+4096],
                        parse_mode="Markdown"
                    )
            else:
                await message.answer(assistant_response, parse_mode="Markdown")
                
        elif run.status == "failed":
            await message.answer(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ "
                "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +7 (342) 225-29-58"
            )
        elif run.status == "expired":
            await message.answer(
                "‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
            )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ message_handler: {e}")
        import traceback
        traceback.print_exc()
        await message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é: sale@nsc-navi.ru –∏–ª–∏ +7 (342) 225-29-58"
        )

@dp.message(F.text == "/reset")
async def reset_handler(message: types.Message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread
    thread = openai_client.beta.threads.create()
    user_threads[user_id] = thread.id
    
    await message.answer("üîÑ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!")

@dp.message(F.text == "/help")
async def help_handler(message: types.Message):
    await message.answer(
        "üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "**–ö–æ–Ω—Ç–∞–∫—Ç—ã:**\n"
        "üìß Email: sale@nsc-navi.ru\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (342) 225-29-58\n"
        "üåê –°–∞–π—Ç: https://nsc-navi.ru",
        parse_mode="Markdown"
    )

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================

async def main():
    print("ü§ñ Telegram –±–æ—Ç –ù–°–ö –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìã Assistant ID: {ASSISTANT_ID}")
    print(f"üîó Bitrix24 Webhook: {BITRIX_WEBHOOK[:50]}...")
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    print("üì° –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: Polling (–¥–æ–ª–≥–∏–π –æ–ø—Ä–æ—Å)")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
